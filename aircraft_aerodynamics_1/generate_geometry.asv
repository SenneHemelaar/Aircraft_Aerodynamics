function [af] =  generate_geometry(n_panels,NACA)

iaf.designation=NACA;           % Choose desired NACA airfoil
iaf.n=n_panels;                       % Amount of panels
iaf.HalfCosineSpacing=0;
iaf.wantFile=0;
iaf.datFilePath='./'; % Current folder
iaf.is_finiteTE=0;
af = naca4gen(iaf);

for i = 1:iaf.n
dist_x(i) = af.xU(i) - af.xU(i+1);
dist_z(i) = af.zU(i) - af.zU(i+1);
dist_r(i) = sqrt(dist_x(i)^2+dist_z(i)^2);
angle(i) = atan(dist_z(i)/dist_x(i));

% Control points upper side
CP_xU(i) = - (0.25*dist_r(i)*cos(angle(i))) + af.xU(i);
CP_zU(i) = - (0.25*dist_r(i)*sin(angle(i))) + af.zU(i);

% Vortex points upper side
VP_xU(i) = - (0.75*dist_r(i)*cos(angle(i))) + af.xU(i);
VP_zU(i) = - (0.75*dist_r(i)*sin(angle(i))) + af.zU(i);

dist_x(i) = af.xL(i) - af.xL(i+1);
dist_z(i) = af.zL(i) - af.zL(i+1);
dist_r(i) = sqrt(dist_x(i)^2+dist_z(i)^2);
angle(i) = atan(dist_z(i)/dist_x(i));

% Control points lower side
CP_xL(i) =  (0.75*dist_r(i)*cos(angle(i))) + af.xL(i);
CP_zL(i) =  (0.75*dist_r(i)*sin(angle(i))) + af.zL(i);

% Vortex points lower side
VP_xL(i) =  (0.25*dist_r(i)*cos(angle(i))) + af.xL(i);
VP_zL(i) =  (0.25*dist_r(i)*sin(angle(i))) + af.zL(i);
end

% Add to struct
af.CP_xL = CP_xL; af.CP_zL = CP_zL;
af.CP_xU = CP_xU; af.CP_zU = CP_zU;
af.VP_xL = VP_xL; af.VP_zL = VP_xL;
af.VP_xU = VP_xU; af.VP_zU = VP_zU;

end